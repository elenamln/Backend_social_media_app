// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// define User model

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique // create user only based on email
  password String

  name String?

  messages Message[] // define relation between user and messages (one to many)
  comments  Comment[] // define relation between user and comments (one to many)
  tokens Token[] // define relation between user and token (one to many)
  likes Like[] // define relation between user and likes (one to many)
  dislikes Dislike[] // define relation between user and dislikes (one to many)
}

// define token model

model Token {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type String
  emailToken String @unique

  valid Boolean @default(true) // create token that is valid, when we logout it's going to be false
  expiresAt DateTime

  userId Int
  user User @relation(fields: [userId], references: [id]) // define relation between user and token (one to many)

}

// defile Message model

model Message {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @updatedAt

  title String
  topic String
  content String

  expiresAt DateTime

  userId Int
  user User @relation(fields: [userId], references: [id]) // define relation between user and message (one to many)

  comments  Comment[] // define relationship between message and comments (one to many)
  likes Like[] // define relationship between message and likes (one to many)
  dislikes Dislike[] // define relationship between message and dislikes (one to many)
}

// define comment model

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id]) // define relation between user and comments (one to many)
  userId    Int
  message   Message  @relation(fields: [messageId], references: [id])
  messageId Int
}

// define like model

model Like {

  messageId Int
  userId    Int
  User      User    @relation(fields: [userId], references: [id])
  Message   Message @relation(fields: [messageId], references: [id])

  @@id(name: "likeId", [messageId, userId])

}

// define like model

model Dislike {

  messageId Int
  userId Int
  User   User @relation(fields: [userId], references: [id])
  Message Message @relation(fields: [messageId], references: [id])

  @@id(name: "likeId", [messageId, userId])

}

